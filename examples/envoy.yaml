node:
  cluster: apiserver-inbound
  id: apiserver-inbound
  metadata:
    labels:
      envoy_cluster_role: apiserver-inbound

# Admin API exposes prometheus metrics at /stats/prometheus and health probe at /ready
# Should only be reachable from CX cluster
admin:
  access_log_path: /dev/stdout
  address:
    socket_address: { address: 0.0.0.0, port_value: 9999 }

static_resources:
  # Packets to/from this listener are rewritten from port 443 to 4443 using iptables in the proxy init container.
  #
  # This allows apiserver to actually listen on port 443, while traffic is forced to Envoy,
  # which causes apiserver to register the correct port (443) in the kubernetes.default endpoints resource.
  # Whereas if apiserver listened on 4443, kubernetes.default would use port 4443, which is only accessible in the underlay.
  listeners:
    - name: tls-bootstrap
      address:
        socket_address: { address: 0.0.0.0, port_value: 4444 }
      filter_chains:
        - transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_params:
                  tls_minimum_protocol_version: TLSv1_2
                tls_certificates:
                  - certificate_chain: { filename: "/apiserver-certs/apiserver.pem" }
                    private_key: { filename: "/apiserver-certs/apiserver-key.pem" }
          filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: tls-bootstrap-stage2
                codec_type: HTTP2
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      path: /dev/stdout
                      log_format:
                        json_format:
                          chain: "tls-bootstrap"
                          status: "%RESPONSE_CODE%"
                          auditID: "%RESP(Audit-Id)%"
                          sessionID: "%REQ(x-ms-client-session-id)%"
                          requestID: "%REQ(x-ms-client-request-id)%"
                          commandName: "%REQ(x-ms-command-name)%"
                          duration: "%DURATION%"
                          sourceIP: "%DOWNSTREAM_REMOTE_ADDRESS%"
                route_config:
                  name: tls-bootstrap
                  virtual_hosts:
                    - name: tls-bootstrap
                      domains: ["*"]
                      require_tls: ALL
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: tls-bootstrap
                http_filters:
                  - name: envoy.filters.http.router

    - name: apiserver
      address:
        socket_address: { address: 0.0.0.0, port_value: 4443 }
      listener_filters:
        - name: envoy.filters.listener.tls_inspector
        - name: envoy.listener.original_src
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.original_src.v3.OriginalSrc
            mark: 123

      filter_chains:
        # Match connections to the server name used to reach apiserver from the portal, and reverse proxy them
        # to apiserver with CORS.
        - filter_chain_match:
            transport_protocol: tls
            server_names:
              - bootstraptest-2a41b500.portal.hcp.pahealyebld56445590.e2e.azmk8s.io
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_params:
                  tls_minimum_protocol_version: TLSv1_2
                tls_certificates:
                  - certificate_chain: { filename: "/portal-tls/server.crt" }
                    private_key: { filename: "/portal-tls/server.key" }
          filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      path: /dev/stdout
                      log_format:
                        json_format:
                          chain: "portal"
                          status: "%RESPONSE_CODE%"
                          auditID: "%RESP(Audit-Id)%"
                          sessionID: "%REQ(x-ms-client-session-id)%"
                          requestID: "%REQ(x-ms-client-request-id)%"
                          commandName: "%REQ(x-ms-command-name)%"
                          duration: "%DURATION%"
                          sourceIP: "%DOWNSTREAM_REMOTE_ADDRESS%"
                route_config:
                  name: apiserver
                  virtual_hosts:
                    - name: apiserver
                      domains: ["*"]
                      require_tls: ALL
                      cors:
                        allow_origin_string_match:
                          - safe_regex:
                              google_re2: {}
                              regex: \*
                        # Return explicit CORS headers rather than "*" because IE requires it
                        allow_methods: "GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH"
                        allow_headers: "accept,access-control-allow-origin,authorization,content-type,x-ms-client-session-id,x-ms-client-request-id,x-ms-command-name"
                        expose_headers: "audit-id,warning,x-envoy-upstream-service-time"
                        max_age: "86400"
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: apiserver-portal
                            upgrade_configs:
                            - upgrade_type: spdy/3.1
                            - upgrade_type: websocket
                http_filters:
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.router
        # Match connections from Konnectivity agents using ALPN and route them to the Konnectivity server.
        - filter_chain_match:
            transport_protocol: tls
            application_protocols:
              - konnectivity
          filters:
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: passthrough
                cluster: konnectivity-agent
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      path: /dev/stdout
                      log_format:
                        json_format:
                          chain: "konnectivity-agent"
                          duration: "%DURATION%"
                          sourceIP: "%DOWNSTREAM_REMOTE_ADDRESS%"
        # Match connections from TLS bootstrap agents using ALPN and route them to the TLS bootstrap server.
        - filter_chain_match:
            transport_protocol: tls
            application_protocols:
            - aks-tls-bootstrap
          filters:
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: passthrough
                cluster: tls-bootstrap-passthrough
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      path: /dev/stdout
                      log_format:
                        json_format:
                          chain: "tls-bootstrap-stage1"
                          duration: "%DURATION%"
                          sourceIP: "%DOWNSTREAM_REMOTE_ADDRESS%"
        # When "application_protocols" chain matches are used, the default filter chain is skipped
        # for connections that don't match it. This is probably an Envoy bug.
        - filter_chain_match:
            transport_protocol: tls
            application_protocols:
              - ''
              - h2
              - h2c
              - http/1.1 
          filters:
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: passthrough
                cluster: apiserver
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      path: /dev/stdout
                      log_format:
                        json_format:
                          chain: "apiserver"
                          duration: "%DURATION%"
                          sourceIP: "%DOWNSTREAM_REMOTE_ADDRESS%"
        # If the connection hasn't been matched yet, assume it is generic L4 apiserver traffic.
        - filters:
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: passthrough
                cluster: apiserver
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      path: /dev/stdout
                      log_format:
                        json_format:
                          chain: "apiserver"
                          duration: "%DURATION%"
                          sourceIP: "%DOWNSTREAM_REMOTE_ADDRESS%"
    # Konnectivity server's metrics endpoint can only bind to localhost.
    # This listener exposes it to Prometheus.
    - name: konnectivity-metrics
      address:
        socket_address: { address: 0.0.0.0, port_value: 8096 }
      filter_chains:
        - filters:
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: passthrough
                cluster: konnectivity-metrics
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                      path: /dev/stdout
                      log_format:
                        json_format:
                          chain: "konnectivity-metrics"
                          duration: "%DURATION%"
                          sourceIP: "%DOWNSTREAM_REMOTE_ADDRESS%"
    # The Konnectivity upstream listener sits inbetween apiserver and konnectivity-svr.
    # All connections to the customer network through Konnectivity traverse this chain.
    - name: konnectivity-upstream
      address:
        pipe:
          path: /tunnel-uds/proxysocket
      filter_chains:
      - filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            stat_prefix: konnectivity-upstream
            route_config:
              name: konnectivity-upstream-router
              virtual_hosts:
              - name: ccp-webhook
                domains:
                - "localhost:8443"
                routes:
                - match:
                    connect_matcher: {}
                  route:
                    cluster: ccp-webhook
                    upgrade_configs:
                    - upgrade_type: CONNECT
                      connect_config: {}
              - name: guard
                domains:
                - "guard.62a75a45999b0600017e91f0.svc.cluster.local:443"
                routes:
                - match:
                    connect_matcher: {}
                  route:
                    cluster: guard
                    upgrade_configs:
                    - upgrade_type: CONNECT
                      connect_config: {}
              - name: msi-connector
                domains:
                - "msi-connector.msi-connector.svc.cluster.local"
                routes:
                - match:
                    connect_matcher: {}
                  route:
                    cluster: msi-connector
                    upgrade_configs:
                    - upgrade_type: CONNECT
                      connect_config: {}
              - name: fallthrough
                domains:
                - "*"
                routes:
                - match:
                    connect_matcher: {}
                  route:
                    cluster: konnectivity-upstream
            http_filters:
            - name: envoy.filters.http.router
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
            http2_protocol_options:
              allow_connect: true
            upgrade_configs:
            - upgrade_type: CONNECT

  clusters:
    # L4 apiserver access
    - name: apiserver
      connect_timeout: 10s
      type: STATIC
      lb_policy: ROUND_ROBIN
      circuit_breakers:
        thresholds: # effectively disable the default circuit breaker
          - priority: DEFAULT
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
          - priority: HIGH
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
      load_assignment:
        cluster_name: apiserver
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 443

    # Special apiserver access only used by requests from the portal
    - name: apiserver-portal
      connect_timeout: 10s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: apiserver-portal
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trusted_ca:
                filename: "/apiserver-certs/ca.pem"
    # Network path used by Konnectivity agents connecting to the server
    - name: konnectivity-agent
      connect_timeout: 10s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: konnectivity-agent
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8081
    - name: konnectivity-upstream
      connect_timeout: 10s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: konnectivity-upstream
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    pipe:
                      path: /tunnel-uds/socket

    - name: ccp-webhook
      connect_timeout: 10s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: ccp-webhook
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "127.0.0.1"
                      port_value: 8443
    - name: tls-bootstrap-passthrough
      connect_timeout: 30s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: tls-bootstrap-passthrough
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "127.0.0.1"
                      port_value: 4444
    - name: tls-bootstrap
      connect_timeout: 30s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: tls-bootstrap
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "tls-bootstrap.62a75a45999b0600017e91f0.svc.cluster.local"
                      port_value: 443
      http2_protocol_options: {}
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            alpn_protocols: h2
            # validation_context:
            #   trusted_ca:
            #     filename: "/apiserver-certs/ca.pem"
    - name: guard
      connect_timeout: 10s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: guard
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "guard.62a75a45999b0600017e91f0.svc.cluster.local"
                      port_value: 443

    - name: msi-connector
      connect_timeout: 10s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: msi-connector
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "msi-connector.msi-connector.svc.cluster.local"
                      port_value: 443

    - name: konnectivity-metrics
      connect_timeout: 10s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: konnectivity-metrics
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8095
